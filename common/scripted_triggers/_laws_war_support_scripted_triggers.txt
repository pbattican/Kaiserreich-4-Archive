has_unsupported_economic_law = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		has_war_support < 0.15
	}
	else_if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		has_war_support < 0.25
	}
	else_if = {
		limit = {
			has_idea = war_economy
		}
		OR = {
			has_war_support < 0.5
			has_war = no
		}
	}
	else_if = {
		limit = {
			has_idea = tot_economic_mobilisation
		}
		OR = {
			has_war_support < 0.8
			has_war = no
		}
	}
	else = {
		always = no
	}
}

has_unsupported_economic_law_ai = {
	if = {
		limit = { has_idea = low_economic_mobilisation }
		has_war_support < 0.15
		has_unattained_important_goals = no
	}
	else_if = {
		limit = { has_idea = partial_economic_mobilisation }
		has_war_support < 0.25
		has_unattained_important_goals = no
	}
	else_if = {
		limit = { has_idea = war_economy }
		always = yes
	}
	else_if = {
		limit = { has_idea = tot_economic_mobilisation }
		always = yes
	}
	else = {
		always = no
	}
}

has_unsupported_manpower_law = {
	if = {
		limit = {
			has_idea = limited_conscription
		}
		has_war_support < 0.1
	}
	else_if = {
		limit = {
			has_idea = extensive_conscription
		}
		has_idea = extensive_conscription
	}
	else_if = {
		limit = {
			has_idea = service_by_requirement
		}
		has_idea = service_by_requirement
	}
	else_if = {
		limit = {
			has_idea = all_adults_serve
		}
		has_idea = all_adults_serve
	}
	else_if = {
		limit = {
			has_idea = scraping_the_barrel
		}
		has_idea = scraping_the_barrel
	}
	else = {
		always = no
	}
}

has_unsupported_manpower_law_ai = {
	if = {
		limit = { has_idea = limited_conscription }
		has_war_support < 0.1
		has_unattained_important_goals = no
		NOT = { has_idea = SWI_national_conscription } # Keep SWI afloat
	}
	else_if = {
		limit = { has_idea = extensive_conscription }
		NOT = { has_idea = SWI_national_conscription } # Keep SWI afloat
	}
	else_if = {
		limit = { has_idea = service_by_requirement }
		always = yes
	}
	else_if = {
		limit = { has_idea = all_adults_serve }
		always = yes
	}
	else_if = {
		limit = { has_idea = scraping_the_barrel }
		always = yes
	}
	else = {
		always = no
	}
}

has_excessive_army_size = {
	if = {
		limit = { check_variable = { max_available_manpower_k = 0 } } #if you have no manpower left, always true
		always = yes
	}
	else = {
		#first calculate how much manpower all the battalions need if they were at full strength
		set_temp_variable = { total_manpower_need = 0 }

		# manpower = 1200
		set_temp_variable = { num_batt = num_battalions_with_type@motorized }
		add_to_temp_variable = { num_batt = num_battalions_with_type@mechanized }
		add_to_temp_variable = { num_batt = num_battalions_with_type@amphibious_mechanized }
		multiply_temp_variable = { num_batt = 1.2 }
		add_to_temp_variable = { total_manpower_need = num_batt }

		# manpower = 1000
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@infantry }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@cavalry }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@bicycle_battalion }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@marine }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@mountaineers }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@paratrooper }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@irregular_infantry }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@militia }
		add_to_temp_variable = { total_manpower_need = num_battalions_with_type@rangers }

		# manpower = 500
		set_temp_variable = { num_batt = num_battalions_with_type@amphibious_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@anti_tank_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@mot_anti_tank_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@mot_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@armored_car }
		add_to_temp_variable = { num_batt = num_battalions_with_type@artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@rocket_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@heavy_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@logistics_company }
		add_to_temp_variable = { num_batt = num_battalions_with_type@maintenance_company }
		add_to_temp_variable = { num_batt = num_battalions_with_type@medium_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@military_police }
		add_to_temp_variable = { num_batt = num_battalions_with_type@modern_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@recon }
		add_to_temp_variable = { num_batt = num_battalions_with_type@mot_recon }
		add_to_temp_variable = { num_batt = num_battalions_with_type@armored_car_recon }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_tank_recon }
		add_to_temp_variable = { num_batt = num_battalions_with_type@signal_company }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@super_heavy_armor }
		add_to_temp_variable = { num_batt = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_temp_variable = { num_batt = num_battalions_with_type@modern_tank_destroyer_brigade }
		multiply_temp_variable = { num_batt = 0.5 }
		add_to_temp_variable = { total_manpower_need = num_batt }

		# manpower = 300
		set_temp_variable = { num_batt = num_battalions_with_type@anti_tank }
		add_to_temp_variable = { num_batt = num_battalions_with_type@anti_air }
		add_to_temp_variable = { num_batt = num_battalions_with_type@artillery }
		add_to_temp_variable = { num_batt = num_battalions_with_type@rocket_artillery }
		add_to_temp_variable = { num_batt = num_battalions_with_type@engineer }
		add_to_temp_variable = { num_batt = num_battalions_with_type@field_hospital }
		multiply_temp_variable = { num_batt = 0.3 }
		add_to_temp_variable = { total_manpower_need = num_batt }

		#now add to that any manpower we currently have in the deployment queue
		set_temp_variable = { num_in_queue = amount_manpower_in_deployment_queue }
		divide_temp_variable = { num_in_queue = 1000 }
		add_to_temp_variable = { total_manpower_need = num_in_queue }

		#now divide that by our maximum available manpower
		divide_temp_variable = { total_manpower_need = max_available_manpower_k }

		#now we can check to see if we are over the limit
		check_variable = { total_manpower_need > 1 }
	}
}

needs_army_reduction_for_manpower = {
	#first check the number of units a country's factories can support
	set_temp_variable = { num_supported_units = num_of_civilian_factories }
	add_to_temp_variable = { num_supported_units = num_of_military_factories }
	multiply_temp_variable = { num_supported_units = 0.5 }

	#now check to make sure we're not under that number
	if = {
		limit = { has_variable = num_actual_divisions }
		check_variable = { num_actual_divisions > num_supported_units }
	}
	else = {
		check_variable = { num_divisions > num_supported_units }
	}

	#and check to make sure we're low on manpower
	has_manpower < 5000
}
